# database init, supports mysql too
database=h2
spring.sql.init.schema-locations=classpath*:db/${database}/schema.sql
spring.sql.init.data-locations=classpath*:db/${database}/data.sql

# Web
spring.thymeleaf.mode=HTML

# JPA
spring.jpa.hibernate.ddl-auto=none
spring.jpa.open-in-view=false

# Internationalization
spring.messages.basename=messages/messages

# Actuator
management.endpoints.web.exposure.include=*

# Logging
logging.level.org.springframework=INFO
# logging.level.org.springframework.web=DEBUG
# logging.level.org.springframework.context.annotation=TRACE

# Maximum time static resources should be cached
spring.web.resources.cache.cachecontrol.max-age=12h

# OAuth2/SSO Configuration
# Configure your organization's OAuth2 provider here
# Example configuration for a generic OAuth2 provider:
spring.security.oauth2.client.registration.sso.client-id=${SSO_CLIENT_ID:demo}
spring.security.oauth2.client.registration.sso.client-secret=${SSO_CLIENT_SECRET:demo}
spring.security.oauth2.client.registration.sso.scope=openid,profile,email
spring.security.oauth2.client.registration.sso.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.sso.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

# Provider configuration - update these URLs for your organization's SSO provider
spring.security.oauth2.client.provider.sso.authorization-uri=${SSO_AUTHORIZATION_URI:https://login.example.com/oauth/authorize}
spring.security.oauth2.client.provider.sso.token-uri=${SSO_TOKEN_URI:https://login.example.com/oauth/token}
spring.security.oauth2.client.provider.sso.user-info-uri=${SSO_USER_INFO_URI:https://login.example.com/oauth/userinfo}
spring.security.oauth2.client.provider.sso.jwk-set-uri=${SSO_JWK_SET_URI:https://login.example.com/.well-known/jwks.json}
